{"ast":null,"code":"import _slicedToArray from \"/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useReducer } from 'react';\nimport './App.css'; // http://api.tvmaze.com/singlesearch/shows?q=girls\n\nfunction dataFetchReducer(state, action) {\n  switch (action.type) {\n    case \"FETCH_START\":\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case \"FETCH_SUCCESS\":\n      console.log(action.data);\n      return _objectSpread({}, state, {\n        data: action.data,\n        loading: false\n      });\n\n    case \"FETCH_FAILED\":\n      console.log(action.error);\n      return _objectSpread({}, state, {\n        data: null,\n        loading: false,\n        error: action.error\n      });\n  }\n}\n\nfunction App() {\n  // const [fetchedData, setFetchedData] = useState(null);\n  // const [error, setError] = useState(null);\n  const _useState = useState('girls'),\n        _useState2 = _slicedToArray(_useState, 2),\n        movie = _useState2[0],\n        setMovie = _useState2[1]; // const [isLoading, setIsLoading] = useState(true);\n\n\n  const _useReducer = useReducer(dataFetchReducer, {\n    data: null,\n    error: null,\n    loading: true\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  useEffect(() => {\n    const myFetch = async () => {\n      dispatch({\n        type: \"FETCH_START\"\n      }); //setIsLoading(true);\n\n      try {\n        const response = await fetch(\"http://api.tvmaze.com/singlesearch/shows?q=\".concat(movie));\n        const responseParsed = await response.json(); //setFetchedData(responseParsed);\n        //setIsLoading(false);\n\n        dispatch({\n          type: \"FETCH_SUCCESS\",\n          data: responseParsed\n        });\n      } catch (error) {\n        dispatch({\n          type: \"FETCH_FAILED\",\n          error: error\n        }); //setError(error);\n        //setIsLoading(false);\n        //console.log('error:', error);\n      }\n    };\n\n    myFetch();\n  }, [movie]); //console.log('fetchedData',fetchedData);\n\n  if (state.isLoading) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \" Loading...\");\n  }\n\n  if (state.error) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \" error\");\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Movies\"), React.createElement(\"button\", {\n    className: \"Button\",\n    onClick: () => setMovie(\"game-of-thrones\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"change movie\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/src/App.js"],"names":["React","useEffect","useState","useReducer","dataFetchReducer","state","action","type","loading","console","log","data","error","App","movie","setMovie","dispatch","myFetch","response","fetch","responseParsed","json","isLoading"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAO,WAAP,C,CAGA;;AACA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,MAAjC,EAAyC;AACvC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,aAAL;AACE,+BAAWF,KAAX;AAAkBG,QAAAA,OAAO,EAAE;AAA3B;;AACF,SAAK,eAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,IAAnB;AACA,+BACKN,KADL;AAEEM,QAAAA,IAAI,EAAEL,MAAM,CAACK,IAFf;AAGEH,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAK,cAAL;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACM,KAAnB;AACE,+BACKP,KADL;AAEEM,QAAAA,IAAI,EAAE,IAFR;AAGEH,QAAAA,OAAO,EAAE,KAHX;AAIEI,QAAAA,KAAK,EAAEN,MAAM,CAACM;AAJhB;AAZJ;AAmBD;;AAED,SAASC,GAAT,GAAe;AACb;AACA;AAFa,oBAGaX,QAAQ,CAAC,OAAD,CAHrB;AAAA;AAAA,QAGNY,KAHM;AAAA,QAGCC,QAHD,kBAIb;;;AAJa,sBAKaZ,UAAU,CAClCC,gBADkC,EAElC;AACEO,IAAAA,IAAI,EAAE,IADR;AAEEC,IAAAA,KAAK,EAAE,IAFT;AAGEJ,IAAAA,OAAO,EAAE;AAHX,GAFkC,CALvB;AAAA;AAAA,QAKNH,KALM;AAAA,QAKCW,QALD;;AAabf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,OAAO,GAAG,YAAY;AAC5BD,MAAAA,QAAQ,CAAC;AAACT,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR,CAD4B,CAE5B;;AAGA,UAAI;AACF,cAAMW,QAAQ,GAAG,MAAMC,KAAK,sDAA+CL,KAA/C,EAA5B;AACA,cAAMM,cAAc,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA7B,CAFE,CAGF;AACA;;AACAL,QAAAA,QAAQ,CAAC;AAACT,UAAAA,IAAI,EAAE,eAAP;AAAwBI,UAAAA,IAAI,EAAES;AAA9B,SAAD,CAAR;AAGD,OARD,CAQE,OAAMR,KAAN,EAAa;AACbI,QAAAA,QAAQ,CAAC;AAACT,UAAAA,IAAI,EAAE,cAAP;AAAuBK,UAAAA,KAAK,EAAEA;AAA9B,SAAD,CAAR,CADa,CAEb;AACA;AACA;AACD;AACF,KAnBC;;AAoBAK,IAAAA,OAAO;AACR,GAtBQ,EAsBN,CAACH,KAAD,CAtBM,CAAT,CAba,CAqCb;;AAEA,MAAIT,KAAK,CAACiB,SAAV,EAAqB;AACnB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACD;;AAED,MAAIjB,KAAK,CAACO,KAAV,EAAiB;AACf,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAEC;AACC,IAAA,SAAS,EAAC,QADX;AAEC,IAAA,OAAO,EAAE,MAAMG,QAAQ,CAAC,iBAAD,CAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD,CADF;AAUD;;AAED,eAAeF,GAAf","sourcesContent":["import React, { useEffect, useState, useReducer } from 'react';\nimport './App.css';\n\n\n// http://api.tvmaze.com/singlesearch/shows?q=girls\nfunction dataFetchReducer(state, action) {\n  switch(action.type) {\n    case \"FETCH_START\":\n      return {...state, loading: true}\n    case \"FETCH_SUCCESS\":\n      console.log(action.data)\n      return {\n        ...state,\n        data: action.data,\n        loading: false\n      }\n    case \"FETCH_FAILED\": \n    console.log(action.error)\n      return {\n        ...state,\n        data: null,\n        loading: false,\n        error: action.error\n      }\n  }\n}\n\nfunction App() {\n  // const [fetchedData, setFetchedData] = useState(null);\n  // const [error, setError] = useState(null);\n  const [movie, setMovie] = useState('girls');\n  // const [isLoading, setIsLoading] = useState(true);\n  const [state, dispatch] = useReducer(\n    dataFetchReducer,\n    {\n      data: null,\n      error: null,\n      loading: true,\n    }\n  )\n  useEffect(() => {\n    const myFetch = async () => {\n    dispatch({type: \"FETCH_START\"});\n    //setIsLoading(true);\n    \n    \n    try {\n      const response = await fetch(`http://api.tvmaze.com/singlesearch/shows?q=${movie}`);\n      const responseParsed = await response.json();\n      //setFetchedData(responseParsed);\n      //setIsLoading(false);\n      dispatch({type: \"FETCH_SUCCESS\", data: responseParsed});\n\n\n    } catch(error) {\n      dispatch({type: \"FETCH_FAILED\", error: error});\n      //setError(error);\n      //setIsLoading(false);\n      //console.log('error:', error);\n    }\n  }\n    myFetch();\n  }, [movie]);\n \n  //console.log('fetchedData',fetchedData);\n  \n  if (state.isLoading) {\n    return <p> Loading...</p>\n  }\n\n  if (state.error) {\n    return <p> error</p>\n  }\n\n  return (\n    <div className=\"App\">\n    <h2>Movies</h2>\n     <button \n      className=\"Button\"\n      onClick={() => setMovie(\"game-of-thrones\")}>\n      change movie\n     </button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}