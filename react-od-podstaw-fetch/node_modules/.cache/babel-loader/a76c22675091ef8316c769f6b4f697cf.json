{"ast":null,"code":"import _slicedToArray from \"/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/src/App.js\";\nimport React, { useEffect, useState, useReducer } from 'react';\nimport './App.css'; // http://api.tvmaze.com/singlesearch/shows?q=girls\n\nfunction App() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        fetchedData = _useState2[0],\n        setFetchedData = _useState2[1];\n\n  const _useState3 = useState('girls'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        movie = _useState4[0],\n        setMovie = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isLoading = _useState6[0],\n        setIsLoading = _useState6[1];\n\n  useEffect(() => {\n    const myFetch = async () => {\n      setIsLoading(true);\n      const response = await fetch(\"http://api.tvmaze.com/singlesearch/shows?q=\".concat(movie));\n\n      try {\n        const responseParsed = await response.json();\n      } catch (error) {\n        setError(error);\n      }\n\n      setIsLoading(false);\n      setFetchedData(responseParsed);\n    };\n\n    myFetch();\n  }, [movie]);\n  console.log(fetchedData);\n\n  if (isLoading) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \" Loading...\");\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Movies\"), React.createElement(\"button\", {\n    className: \"Button\",\n    onClick: () => setMovie(\"batman\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"change movie\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/src/App.js"],"names":["React","useEffect","useState","useReducer","App","fetchedData","setFetchedData","movie","setMovie","isLoading","setIsLoading","myFetch","response","fetch","responseParsed","json","error","setError","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAO,WAAP,C,CAGA;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACyBF,QAAQ,CAAC,IAAD,CADjC;AAAA;AAAA,QACNG,WADM;AAAA,QACOC,cADP;;AAAA,qBAEaJ,QAAQ,CAAC,OAAD,CAFrB;AAAA;AAAA,QAENK,KAFM;AAAA,QAECC,QAFD;;AAAA,qBAGqBN,QAAQ,CAAC,IAAD,CAH7B;AAAA;AAAA,QAGNO,SAHM;AAAA,QAGKC,YAHL;;AAKbT,EAAAA,SAAS,CAAC,MAAM;AAChB,UAAMU,OAAO,GAAG,YAAY;AAC1BD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,YAAME,QAAQ,GAAG,MAAMC,KAAK,sDAA+CN,KAA/C,EAA5B;;AACA,UAAI;AACJ,cAAMO,cAAc,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA7B;AACC,OAFD,CAEE,OAAMC,KAAN,EAAa;AACbC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;;AACDN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAJ,MAAAA,cAAc,CAACQ,cAAD,CAAd;AACD,KAXD;;AAaEH,IAAAA,OAAO;AACR,GAfQ,EAeN,CAACJ,KAAD,CAfM,CAAT;AAiBAW,EAAAA,OAAO,CAACC,GAAR,CAAYd,WAAZ;;AAEA,MAAII,SAAJ,EAAe;AACb,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAEC;AACC,IAAA,SAAS,EAAC,QADX;AAEC,IAAA,OAAO,EAAE,MAAMD,QAAQ,CAAC,QAAD,CAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD,CADF;AAUD;;AAED,eAAeJ,GAAf","sourcesContent":["import React, { useEffect, useState, useReducer } from 'react';\nimport './App.css';\n\n\n// http://api.tvmaze.com/singlesearch/shows?q=girls\n\nfunction App() {\n  const [fetchedData, setFetchedData] = useState(null);\n  const [movie, setMovie] = useState('girls');\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n  const myFetch = async () => {\n    setIsLoading(true);\n    \n    const response = await fetch(`http://api.tvmaze.com/singlesearch/shows?q=${movie}`);\n    try {\n    const responseParsed = await response.json();\n    } catch(error) {\n      setError(error);\n    }\n    setIsLoading(false);\n    setFetchedData(responseParsed);\n  }\n  \n    myFetch();\n  }, [movie]);\n \n  console.log(fetchedData);\n  \n  if (isLoading) {\n    return <p> Loading...</p>\n  }\n\n  return (\n    <div className=\"App\">\n    <h2>Movies</h2>\n     <button \n      className=\"Button\"\n      onClick={() => setMovie(\"batman\")}>\n      change movie\n     </button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}