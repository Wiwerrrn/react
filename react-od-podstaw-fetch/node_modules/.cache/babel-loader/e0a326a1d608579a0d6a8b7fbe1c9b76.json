{"ast":null,"code":"import _slicedToArray from \"/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/src/App.js\";\nimport React, { useEffect, useState, useReducer } from 'react';\nimport './App.css'; // http://api.tvmaze.com/singlesearch/shows?q=girls\n\nfunction App() {\n  // const [fetchedData, setFetchedData] = useState(null);\n  // const [error, setError] = useState(null);\n  const _useState = useState('girls'),\n        _useState2 = _slicedToArray(_useState, 2),\n        movie = _useState2[0],\n        setMovie = _useState2[1]; // const [isLoading, setIsLoading] = useState(true);\n\n\n  const _useReducer = _slicedToArray(useReducer, 2),\n        state = _useReducer[0],\n        dispatch = _useReducer[1];\n\n  useEffect(() => {\n    const myFetch = async () => {\n      setIsLoading(true);\n      const response = await fetch(\"http://api.tvmaze.com/singlesearch/shows?q=\".concat(movie));\n\n      try {\n        const responseParsed = await response.json();\n        setFetchedData(responseParsed);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n        setIsLoading(false);\n        console.log('error:', error);\n      }\n    };\n\n    myFetch();\n  }, [movie]);\n  console.log('fetchedData', fetchedData);\n\n  if (isLoading) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \" Loading...\");\n  }\n\n  if (error) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \" error\");\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Movies\"), React.createElement(\"button\", {\n    className: \"Button\",\n    onClick: () => setMovie(\"game-of-thrones\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"change movie\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ewelina/react/ReactPoradnik/react-od-podstaw-fetch/src/App.js"],"names":["React","useEffect","useState","useReducer","App","movie","setMovie","state","dispatch","myFetch","setIsLoading","response","fetch","responseParsed","json","setFetchedData","error","setError","console","log","fetchedData","isLoading"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAO,WAAP,C,CAGA;;AAEA,SAASC,GAAT,GAAe;AACb;AACA;AAFa,oBAGaF,QAAQ,CAAC,OAAD,CAHrB;AAAA;AAAA,QAGNG,KAHM;AAAA,QAGCC,QAHD,kBAIb;;;AAJa,qCAKaH,UALb;AAAA,QAKNI,KALM;AAAA,QAKCC,QALD;;AAMbP,EAAAA,SAAS,CAAC,MAAM;AAChB,UAAMQ,OAAO,GAAG,YAAY;AAC1BC,MAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,sDAA+CP,KAA/C,EAA5B;;AACA,UAAI;AACF,cAAMQ,cAAc,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA7B;AACAC,QAAAA,cAAc,CAACF,cAAD,CAAd;AACAH,QAAAA,YAAY,CAAC,KAAD,CAAZ;AAGD,OAND,CAME,OAAMM,KAAN,EAAa;AACbC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACAN,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,KAAtB;AACD;AACF,KAfD;;AAgBEP,IAAAA,OAAO;AACR,GAlBQ,EAkBN,CAACJ,KAAD,CAlBM,CAAT;AAoBAa,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BC,WAA1B;;AAEA,MAAIC,SAAJ,EAAe;AACb,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACD;;AAED,MAAIL,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAEC;AACC,IAAA,SAAS,EAAC,QADX;AAEC,IAAA,OAAO,EAAE,MAAMV,QAAQ,CAAC,iBAAD,CAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD,CADF;AAUD;;AAED,eAAeF,GAAf","sourcesContent":["import React, { useEffect, useState, useReducer } from 'react';\nimport './App.css';\n\n\n// http://api.tvmaze.com/singlesearch/shows?q=girls\n\nfunction App() {\n  // const [fetchedData, setFetchedData] = useState(null);\n  // const [error, setError] = useState(null);\n  const [movie, setMovie] = useState('girls');\n  // const [isLoading, setIsLoading] = useState(true);\n  const [state, dispatch] = useReducer\n  useEffect(() => {\n  const myFetch = async () => {\n    setIsLoading(true);\n    \n    const response = await fetch(`http://api.tvmaze.com/singlesearch/shows?q=${movie}`);\n    try {\n      const responseParsed = await response.json();\n      setFetchedData(responseParsed);\n      setIsLoading(false);\n      \n\n    } catch(error) {\n      setError(error);\n      setIsLoading(false);\n      console.log('error:', error);\n    }\n  }\n    myFetch();\n  }, [movie]);\n \n  console.log('fetchedData',fetchedData);\n  \n  if (isLoading) {\n    return <p> Loading...</p>\n  }\n\n  if (error) {\n    return <p> error</p>\n  }\n\n  return (\n    <div className=\"App\">\n    <h2>Movies</h2>\n     <button \n      className=\"Button\"\n      onClick={() => setMovie(\"game-of-thrones\")}>\n      change movie\n     </button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}